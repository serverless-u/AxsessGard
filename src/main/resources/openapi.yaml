openapi: 3.0.0
info:
  title: AxsessGard API
  version: 1.0.0
  license: {name: Apache 2.0, url: 'https://www.apache.org/licenses/LICENSE-2.0'}
  description: |
    AxsessGard is an access control microservice giving access control advices to other services.
    Applications protecting their assets can ask the client to get a signed JWT containing an access advice.
    Based on the advice, the application will or will not allow the access to the resource.
paths:
  /axsg/permissions:
    get:
      summary: Get permissions
      description: |
        Get the permissions, specifically the list of actions that a certain `user` bearing `roles` is allowed to perform on an object controlled by the `policy`.
        The `user`, `policy` and the list of `roles` are claims delivered by the JWT in the authentication header.
        The JWT has to be signed by one of the known applications configured in the application.
      operationId: getPermissions
      tags: [api]
      parameters:
      - in: header
        name: Authorization
        required: true
        schema: {type: string}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {type: string}
  /axsg/acl/{name}:
    get:
      summary: Get ACL content
      description: |
        Get the ACL content for a given `name`.
        The `name` is a unique identifier for the ACL content.
      operationId: getAcl
      tags: [api]
      parameters:
      - in: path
        name: name
        required: true
        schema: {type: string}
      - in: header
        name: x-user-id
        schema: {type: string}
      - in: header
        name: Authorization
        schema: {type: string}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {type: string}
    delete:
      summary: Delete ACL
      description: |
        Delete the ACL for a given `name`.
        The `name` is a unique identifier for the ACL content.
        To perform the operation the client should have `delete` permission on the ACL object.
      operationId: deleteAcl
      tags: [api]
      parameters:
      - in: path
        name: name
        required: true
        schema: {type: string}
      - in: header
        name: x-user-id
        schema: {type: string}
      - in: header
        name: Authorization
        schema: {type: string}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {type: string}
    put:
      summary: Update ACL content
      description: |
        Update the ACL content for a given `name`.
        The `name` is a unique identifier for the ACL content.
        The `ACL` object is passed in the request body.
        Note that the name in the new value may be different from the name in the path.
        This is the way how you can rename the ACL content.
        To perform the operation the client should have `write` permission on the ACL object.
      operationId: putAcl
      tags: [api]
      parameters:
      - in: path
        name: name
        required: true
        schema: {type: string}
      - in: header
        name: x-user-id
        schema: {type: string}
      - in: header
        name: Authorization
        schema: {type: string}
      requestBody:
        required: true
        content:
          application/json:
            schema: {type: object, description: ACL object}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {type: string}
  /axsg/acl:
    post:
      summary: Insert ACL content
      operationId: postAcl
      description: |
        Insert the ACL content.
        The `ACL` object is passed in the request body.
        To perform the operation the client should have `create` permission in the `createAcl` ACL.
      tags: [api]
      parameters:
      - in: header
        name: x-user-id
        schema: {type: string}
      - in: header
        name: Authorization
        schema: {type: string}
      requestBody:
        required: true
        content:
          application/json:
            schema: {type: object, description: ACL object}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {type: string}
  /axsg/put/acl/{name}:
    get:
      summary: Get ACL content
      description: |
        Signal an attempt to modify the ACL content for a given `name`.
        The call can be used to get the permission request JWT and the location without sending the actual ACL content.
        Authorization JWT in the request header is ignored.
      operationId: getPutPermission
      tags: [api]
      parameters:
      - in: path
        name: name
        required: true
        schema: {type: string}
      - in: header
        name: x-user-id
        required: false
        schema: {type: string}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {type: string}
  /axsg/post/acl:
    get:
      summary: Get ACL content
      operationId: getPostPermission
      description: |
        Signal an attempt to create a new ACL content.
        The call can be used to get the permission request JWT and the location without sending the actual ACL content.
        Authorization JWT in the request header is ignored.
      tags: [api]
      parameters:
      - in: header
        name: x-user-id
        required: false
        schema: {type: string}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {type: string}
  /axsg/acls/{name}:
    get:
      summary: Get list of ACL names
      description: |
        List all the ACLs that start with the given prefix `name`.
        To perform the operation the client should have `list` permission in the `listAcls` ACL.
      operationId: getAcls
      tags: [api]
      parameters:
      - in: header
        name: Authorization
        schema: {type: string}
      - in: path
        name: name
        required: true
        schema: {type: string}
      - in: header
        name: x-user-id
        required: false
        description: the user id of the client
        schema: {type: string}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {type: string}